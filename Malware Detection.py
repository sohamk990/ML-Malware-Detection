import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import gc
import os
from tqdm import tqdm
from sklearn.preprocessing import LabelEncoder
import lightgbm as lgb
from sklearn.metrics import roc_auc_score, roc_curve,auc,plot_roc_curve
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
print("Setup Complete 😁 ")

dtypes = {
        'MachineIdentifier':                                    'object',
        'ProductName':                                          'object',
        'EngineVersion':                                        'object',
        'AppVersion':                                           'object',
        'AvSigVersion':                                         'object',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'object',
        'Processor':                                            'object',
        'OsVer':                                                'object',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'object',
        'OsBuildLab':                                           'object',
        'SkuEdition':                                           'object',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'object',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'object',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'object',
        'Census_DeviceFamily':                                  'object',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'object',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'object',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'object',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'object',
        'Census_InternalBatteryType':                           'object',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'object',
        'Census_OSArchitecture':                                'object',
        'Census_OSBranch':                                      'object',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'object',
        'Census_OSSkuName':                                     'object',
        'Census_OSInstallTypeName':                             'object',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'object',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'object',
        'Census_ActivationChannel':                             'object',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'object',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }
#For Memory Management---

def compression(df):    
    for c in df:
        col_type = str(df[c].dtypes)
        int_list = ['int16', 'int32', 'int64']
        flt_list = ['float16', 'float32', 'float64']
        
        if col_type in int_list:
            c_min = df[c].min()
            c_max = df[c].max()            
            if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                df[c] = df[c].astype(np.int8)
            elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                df[c] = df[c].astype(np.int16)
            elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                df[c] = df[c].astype(np.int32)
            elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                df[c] = df[c].astype(np.int64)

        elif col_type in flt_list:
                c_min = df[c].min()
                c_max = df[c].max()
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[c] = df[c].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[c] = df[c].astype(np.float32)
                else:
                    df[c] = df[c].astype(np.float64)  
        
    return df

file = "../input/malware-detection-tejas/train.csv"
train = pd.read_csv(file, dtype = dtypes)
train = compression(train)

file = "../input/malware-detection-tejas/test.csv"
test = pd.read_csv(file,dtype=dtypes)
test = compression(test)

train.drop(['AutoSampleOptIn',
             'IsBeta',  
             'PuaMode',
             'UacLuaenable',
             'Census_ProcessorClass',
             'DefaultBrowsersIdentifier',
             'Census_IsFlightingInternal',
             'Census_InternalBatteryType',
             'Census_ThresholdOptIn', 
             'Census_IsWIMBootEnabled',
             'Census_IsFlightsDisabled',
             'Census_InternalBatteryNumberOfCharges', 
             'HasTpm',
             'Census_IsPortableOperatingSystem'], axis = 1, inplace = True)

test.drop(['AutoSampleOptIn',
             'IsBeta', 
             'PuaMode',
             'UacLuaenable',
             'Census_ProcessorClass',
             'DefaultBrowsersIdentifier',
             'Census_IsFlightingInternal',
             'Census_InternalBatteryType',
             'Census_ThresholdOptIn', 
             'Census_IsWIMBootEnabled',
             'Census_IsFlightsDisabled',
             'Census_InternalBatteryNumberOfCharges',
             'HasTpm',
             'Census_IsPortableOperatingSystem'], axis = 1, inplace = True)

df = pd.concat([test, train])
df = compression(df)
print(df.shape)

gc.enable()
del test, train
gc.collect()

bool_col=['Census_IsSecureBootEnabled',
'Census_IsTouchEnabled',
'Wdft_IsGamer',
'Census_IsVirtualDevice',
'Census_HasOpticalDiskDrive',
'IsProtected',
'IsSxsPassiveMode',
'SMode',
'Firewall',
'Census_IsPenCapable',
'Census_IsAlwaysOnAlwaysConnectedCapable']


num_col=['Census_InternalPrimaryDiagonalDisplaySizeInInches',
'Census_PrimaryDiskTotalCapacity',
'Census_ProcessorCoreCount',
'Census_SystemVolumeTotalCapacity',
'Census_TotalPhysicalRAM',
'AVProductsInstalled',
'AVProductStatesIdentifier',
'Census_FirmwareManufacturerIdentifier',
'Census_FirmwareVersionIdentifier',
'Census_InternalPrimaryDisplayResolutionHorizontal',
'Census_InternalPrimaryDisplayResolutionVertical',
'Census_OEMModelIdentifier',
'Census_OEMNameIdentifier',
'Census_OSBuildNumber',
'Census_OSBuildRevision',
'Census_OSInstallLanguageIdentifier',
'Census_OSUILocaleIdentifier',
'Census_ProcessorManufacturerIdentifier',
'Census_ProcessorModelIdentifier',
'CityIdentifier',
'CountryIdentifier',
'GeoNameIdentifier',
'IeVerIdentifier',
'LocaleEnglishNameIdentifier',
'OrganizationIdentifier',
'OsBuild',
'OsSuite',
'Wdft_RegionIdentifier',
'RtpStateBitfield',
'AVProductsEnabled'
]


cat_col=['AppVersion',
'AvSigVersion',
'Census_ActivationChannel',
'Census_ChassisTypeName',
'Census_GenuineStateName',
'Census_MDC2FormFactor',
'Census_OSArchitecture',
'Census_OSBranch',
'Census_OSEdition',
'Census_OSInstallTypeName',
'Census_OSSkuName',
'Census_OSVersion',
'Census_OSWUAutoUpdateOptionsName',
'Census_PowerPlatformRoleName',
'Census_PrimaryDiskTypeName',
'EngineVersion',
'OsBuildLab',
'OsPlatformSubRelease',
'Processor',
'SkuEdition',
'SmartScreen',
'Platform',
'Census_FlightRing',
'OsVer',
'ProductName'
        ]
#Filling null values in boolean columns with mode
for col in tqdm(bool_col):
    df[col] = df[col].fillna(df[col].mode()[0])

#Filling null values in numerical columns with -1
for col in tqdm(num_col):
    df[col] = df[col].fillna(-1)
    
# Everything to lowercase
for col in tqdm(cat_col):
    df[col] = df[col].str.lower()
    
df['OsVer'] = df['OsVer'].astype(str)
def clean_OsVer(x):
    x=x.lower()
    return x.split('.')[0]
df['OsVer'] = df['OsVer'].apply(clean_OsVer)

#Combing categories of columns for better encoding and score

df['Census_FlightRing'] = df['Census_FlightRing'].astype('category')
df['Census_FlightRing'].replace(['not_set'], 'unknown', inplace=True)
df['Census_FlightRing'].replace(['osg', 'rp', 'wis', 'wif'], 'other', inplace=True)
df['Census_FlightRing'] = df['Census_FlightRing'].fillna('unknown')
df['Census_FlightRing'] = df['Census_FlightRing'].cat.remove_unused_categories()

df['Census_DeviceFamily'].replace(['windows'], df['Census_DeviceFamily'].mode(), inplace=True)
df['Census_DeviceFamily'] = df['Census_DeviceFamily'].astype('category')
df['Census_DeviceFamily'] = df['Census_DeviceFamily'].cat.remove_unused_categories()

def Clean_ProductName(x):
    x = x.lower()
    if 'windows' in x:
        return 'windows'
    elif 'mse' in x:
        return 'mse'    
    else:
        return 'unknown'
    
df['ProductName'] = df['ProductName'].astype('category')
df['ProductName'] = df['ProductName'].cat.add_categories(['unknown'])
df['ProductName'] = df['ProductName'].fillna('unknown')
df['ProductName'] = df['ProductName'].astype(str)
df['ProductName'] = df['ProductName'].apply(Clean_ProductName)
df['ProductName'] = df['ProductName'].astype('category')
df['ProductName'] = df['ProductName'].cat.remove_unused_categories()

def Clean_Census_ActivationChannel(x):
    x = x.lower()
    if 'oem' in x:
        return 'oem'
    elif 'volume' in x:
        return 'volume'
    elif 'retail' in x:
        return 'retail'
    else:
        return x

df['Census_ActivationChannel'] = df['Census_ActivationChannel'].astype(str)
df['Census_ActivationChannel'] = df['Census_ActivationChannel'].apply(Clean_Census_ActivationChannel)

def clean_Census_ChassisTypeName(x):
    x = x.lower()    
    if 'laptop' in x:
        return 'notebook'
    elif 'notebook' in x:
        return 'notebook'
    elif 'detachable' in x:
        return 'notebook'
    elif 'convertible' in x:
        return 'desktop'
    elif 'pc' in x:
        return 'pc'
    elif 'other' in x:
        return 'desktop'
    elif 'tower' in x:
        return 'tower'
    elif x.isdigit():
        return 'unknown'
    else:
        return x

df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].fillna('unknown')
df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].astype(str)
df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].apply(clean_Census_ChassisTypeName)
df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].astype('category')
df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].cat.remove_unused_categories()
df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].astype('object')

df['Census_GenuineStateName'] = df['Census_GenuineStateName'].astype('category')
df['Census_GenuineStateName'] = df['Census_GenuineStateName'].fillna('unknown')
df['Census_GenuineStateName'] = df['Census_GenuineStateName'].cat.remove_unused_categories()

def Clean_Census_MDC2FormFactor(x):
    x = x.lower()
    if 'server' in x:
        return 'server'
    elif 'tablet' in x:
        return 'tablet'                  
    else:
        return x

df['Census_MDC2FormFactor'] = df['Census_MDC2FormFactor'].astype(str)
df['Census_MDC2FormFactor'] = df['Census_MDC2FormFactor'].apply(Clean_Census_MDC2FormFactor)
df['Census_MDC2FormFactor'] = df['Census_MDC2FormFactor'].astype('category')
df['Census_MDC2FormFactor'] = df['Census_MDC2FormFactor'].cat.remove_unused_categories()

def Clean_Census_OSEdition(x):
    x = x.lower()
    if 'core' in x:
        return 'core'
    elif 'professional' in x:
        return 'professional'
    elif 'enterprise' in x:
        return 'enterprise'
    elif 'server' in x:
        return 'server'
    elif 'education' in x:
        return 'education'
    elif 'cloud' in x:
        return 'cloud'
    else:
        return x

df['Census_OSEdition'] = df['Census_OSEdition'].astype('category')
df['Census_OSEdition'] = df['Census_OSEdition'].cat.add_categories(['unknown'])
df['Census_OSEdition'] = df['Census_OSEdition'].fillna('unknown')
df['Census_OSEdition'] = df['Census_OSEdition'].astype(str)
df['Census_OSEdition'] = df['Census_OSEdition'].apply(Clean_Census_OSEdition)
df['Census_OSEdition'] = df['Census_OSEdition'].astype('category')
df['Census_OSEdition'] = df['Census_OSEdition'].cat.remove_unused_categories()

def Clean_Census_OSSkuName(x):
    x = x.lower()
    if 'core' in x:
        return 'core'
    elif 'pro' in x:
        return 'pro'
    elif 'enterprise' in x:
        return 'enterprise'
    elif 'server' in x:
        return 'server'
    elif 'education' in x:
        return 'education'
    elif 'cloud' in x:
        return 'cloud'
    else:
        return x

df['Census_OSSkuName'] = df['Census_OSSkuName'].astype(str)
df['Census_OSSkuName'] = df['Census_OSSkuName'].apply(Clean_Census_OSSkuName)
df['Census_OSSkuName'] = df['Census_OSSkuName'].astype('category')
df['Census_OSSkuName'] = df['Census_OSSkuName'].cat.remove_unused_categories()

def Clean_PowerPlatformRoleName(x):
    x = x.lower()
    if 'server' in x:
        return 'server'
    if 'pc' in x:
        return 'desktop'    
    else:
        return x

df['Census_PowerPlatformRoleName'] = df['Census_PowerPlatformRoleName'].fillna('unknown')
df['Census_PowerPlatformRoleName'] = df['Census_PowerPlatformRoleName'].astype(str)
df['Census_PowerPlatformRoleName'] = df['Census_PowerPlatformRoleName'].apply(Clean_PowerPlatformRoleName)
df['Census_PowerPlatformRoleName'] = df['Census_PowerPlatformRoleName'].astype('category')
df['Census_PowerPlatformRoleName'] = df['Census_PowerPlatformRoleName'].cat.remove_unused_categories()

def Clean_Census_PrimaryDiskTypeName(x):
    if 'hdd' in x:
        return 'hdd'
    elif 'ssd' in x:
        return 'ssd'
    else:
        return 'unknown'

df['Census_PrimaryDiskTypeName'] = df['Census_PrimaryDiskTypeName'].fillna('unknown')
df['Census_PrimaryDiskTypeName'] = df['Census_PrimaryDiskTypeName'].astype(str)
df['Census_PrimaryDiskTypeName'] = df['Census_PrimaryDiskTypeName'].apply(Clean_Census_PrimaryDiskTypeName)
df['Census_PrimaryDiskTypeName'] = df['Census_PrimaryDiskTypeName'].astype('category')
df['Census_PrimaryDiskTypeName'] = df['Census_PrimaryDiskTypeName'].cat.remove_unused_categories()

df['OsBuildLab'] = df['OsBuildLab'].astype('category')
df['OsBuildLab'] = df['OsBuildLab'].cat.add_categories(['unknown'])
df['OsBuildLab'] = df['OsBuildLab'].cat.remove_unused_categories()
df['OsBuildLab'] = df['OsBuildLab'].astype('object')

def combine_SmartScreen(x):
    x = x.lower()
    if x not in ['requireadmin', 'existsnotset', 'off', 'warn', 'prompt', 'block', 'on']:
        return 'unknown'
    else:
        return x

df['SmartScreen'] = df['SmartScreen'].astype('category')
df['SmartScreen'] = df['SmartScreen'].cat.add_categories(['unknown'])
df['SmartScreen'] = df['SmartScreen'].fillna('unknown')
df['SmartScreen'] = df['SmartScreen'].astype(str)
df['SmartScreen'] = df['SmartScreen'].apply(combine_SmartScreen)
df['SmartScreen'] = df['SmartScreen'].astype('category')
df['SmartScreen'] = df['SmartScreen'].cat.remove_unused_categories()

list_label = ['Census_ActivationChannel', 
'Census_ChassisTypeName',
'Census_GenuineStateName', 
'Census_MDC2FormFactor', 
'Census_OSArchitecture',
 'Census_OSBranch', 
 'Census_OSEdition', 
 'Census_OSInstallTypeName', 
 'Census_OSSkuName', 
 'Census_OSWUAutoUpdateOptionsName', 
 'Census_PowerPlatformRoleName', 
 'Census_PrimaryDiskTypeName', 
 'OsPlatformSubRelease', 
 'Processor',
 'Platform',
 'SkuEdition', 
 'SmartScreen',
'Census_FlightRing',
'OsVer',
'Census_DeviceFamily',
'ProductName'
]

list_feature =['Census_OSVersion',
               'EngineVersion', 
               'OsBuildLab', 
               'AvSigVersion', 
               'AppVersion',
               'RtpStateBitfield'
		]
#Lable Encoding            

for col in tqdm(num_col):
    le = LabelEncoder()
    df[col] = df[col].astype(str)
    df[col] = le.fit_transform(df[col])
    df[col] = df[col].astype('int64')
    
for col in tqdm(list_label):    
    le = LabelEncoder()
    df[col] = df[col].astype(str)
    df[col] = le.fit_transform(df[col])
    df[col] = df[col].astype('int64')
    
for col in tqdm(list_feature):
    le = LabelEncoder()
    df[col] = df[col].astype(str)
    df[col] = le.fit_transform(df[col])
    df[col] = df[col].astype('int64')
    
train = df[df['HasDetections'].notnull()]
print(train.shape)

test = df[df['HasDetections'].isnull()]
print(test.shape)

target = 'HasDetections'
train_id = 'MachineIdentifier'

y_train = np.array(train[target].astype(np.int8)).reshape((-1,))
x_train = train.drop(columns = [target, train_id])

y_test = list(test[train_id])
x_test = test.drop(columns = [target, train_id])


feature_test = ['OsPlatformSubRelease', 
 'Census_MDC2FormFactor', 
 'Census_PrimaryDiskTypeName',
 'Census_OSSkuName', 
 'Census_OSBranch', 
 'SkuEdition', 
 'Census_OSArchitecture',
 'Census_OSEdition', 
 'Census_GenuineStateName', 
 'Processor', 
 'SmartScreen', 
 'Census_OSInstallTypeName', 
 'Census_OSWUAutoUpdateOptionsName',
 'Census_ChassisTypeName',   
 'Census_ActivationChannel', 
 'Census_PowerPlatformRoleName', 
 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
 'Census_ProcessorCoreCount',
 'Census_IsSecureBootEnabled',
 'Census_IsTouchEnabled',
 'Wdft_IsGamer',
 'AppVersion',
 'AvSigVersion',
 'Census_OSVersion',
 'EngineVersion',
 'OsBuildLab',
'Census_IsVirtualDevice', 
'Census_HasOpticalDiskDrive',
'RtpStateBitfield',
'SMode',
'IsSxsPassiveMode',
'IsProtected',
'Census_FlightRing',
'AVProductsEnabled']

#''''''''''''''''''''''Testing Model'''''''''''''''''

X_TRAIN, X_TEST, Y_TRAIN, Y_TEST = train_test_split(x_train, y_train, test_size=0.3)

model = lgb.LGBMClassifier(objective = 'binary',n_estimators=500,max_bin=100,num_leaves=30,max_depth=5)
model = model.fit(X_TRAIN,Y_TRAIN,eval_metric = 'roc_auc')

predict = model.predict_proba(X_TEST)
fpr,tpr, _ = roc_curve(Y_TEST,predict[:,1])
roc_auc = auc(fpr,tpr)
roc_auc_score(Y_TEST, predict[:, 1])

train_set = lgb.Dataset(x_train, label = y_train)
model = lgb.LGBMClassifier(objective = 'binary',n_estimators=500,max_bin=100,num_leaves=30,max_depth=5)
model = model.fit(X_TRAIN,Y_TRAIN,eval_metric = 'roc_auc')

print("Model Score%: ", model.score(x_train,y_train)*100)
plot_roc_curve(model, x_train,y_train)

probabilities = model.predict_proba(x_test)[:, 1]
submission = pd.DataFrame({train_id: y_test, target: probabilities})
submission.head()

submission.to_csv('/kaggle/working/M1.csv', index = False)
print("Completed 😀😀")
